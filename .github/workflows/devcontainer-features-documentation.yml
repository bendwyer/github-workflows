---
name: devcontainer-features-documentation
on:
  workflow_call:
    inputs:
      gh_app_id:
        description: GitHub App ID
        required: true
        type: string
      owner:
        description: GitHub App installation owner. Defaults to repository owner. If 'owner' is set and 'repositories' is empty, access will be scoped to all repositories in the provided repository owner's installation. If 'owner' and 'repositories' are empty, access will be scoped only to the current repository.
        required: false
        type: string
      repositories:
        description: Comma-separated list of repositories to grant access to. If 'owner' is set and 'repositories' is empty, access will be scoped to all repositories in the provided repository owner's installation. If 'owner' and 'repositories' are empty, access will be scoped only to the current repository.
        required: false
        type: string
    secrets:
      gh_app_private_key:
        description: GitHub App private key
        required: true

jobs:
  docs:
    runs-on: ubuntu-24.04
    steps:
      - name: Generate GitHub App token
        uses: actions/create-github-app-token@v1
        id: app_token
        with:
          app-id: ${{ inputs.gh_app_id }}
          private-key: ${{ secrets.gh_app_private_key }}
          owner: ${{ inputs.owner }}
          repositories: ${{ inputs.repositories }}

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Generate documentation
        uses: devcontainers/action@v1
        with:
          generate-docs: true
          base-path-to-features: ./src

      - name: Detect README changes
        uses: tj-actions/verify-changed-files@v20
        id: changes
        with:
          files: |
            src/**/README.md

      - name: Create a PR for documentation
        if: steps.changes.outputs.files_changed == 'true'
        # continue-on-error: true
        env:
          GH_TOKEN: ${{ steps.app_token.outputs.token }}
        run: |
          set -e

          # get current branch commit sha
          echo "Getting latest branch commit SHA"
          SHA=$(gh api --method GET -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" /repos/${{ github.repository }}/git/ref/heads/main -q .object.sha)
          echo "SHA=$SHA"

          # create branch
          echo "Setting branch name variable"
          BRANCH_NAME="automated-documentation-update-${{ github.run_id }}"
          echo "Check if branch exists"
          BRANCH_STATUS=$(gh api --method GET -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" /repos/${{ github.repository }}/git/ref/heads/$BRANCH_NAME | jq -r .status)
          echo "BRANCH_STATUS=$BRANCH_STATUS"
          if [[ $BRANCH_STATUS == "404" || $BRANCH_STATUS == "409" ]]
          then
            echo "Creating new branch $BRANCH_NAME"
            gh api --method POST -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" /repos/${{ github.repository }}/git/refs -f "ref=refs/heads/$BRANCH_NAME" -f "sha=$SHA"
          else
            echo "Updating branch $BRANCH_NAME"
            gh api --method PATCH -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" /repos/${{ github.repository }}/git/refs/heads/$BRANCH_NAME -f "sha=$SHA"
          fi

          # Add / update and commit
          echo "Setting FILE_CHANGED var"
          FILES_CHANGED=$(git status --porcelain | awk '{print $2}')
          echo "The following files have changed: $FILES_CHANGED"
          echo "Looping over changed files"
          for file in $FILES_CHANGED; do
            echo "Setting CONTENT var"
            CONTENT=$(base64 -w 0 $file)
            echo "$file base64 is $CONTENT"
            echo "Setting FILENAME var"
            FILENAME=$(basename $file)
            echo "$FILENAME"
            echo "Setting BLOB_SHA"
            BLOB_SHA=$(curl -s -H "Authorization: token ${{ steps.app_token.outputs.token }}" -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" https://api.github.com/repos/${{ github.repository }}/contents/$file?ref=$BRANCH_NAME | jq -r .sha)
            if [ "$BLOB_SHA" == "null" ]
            then
              BLOB_SHA=""
            fi
            echo "BLOB_SHA is $BLOB_SHA"
            echo "Committing changes"
            gh api --method PUT -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" /repos/${{ github.repository }}/contents/$file -f "message=Update $FILENAME" -f "content=$CONTENT" -f "branch=$BRANCH_NAME" -f "sha=$BLOB_SHA"
          done

          # create pr
          echo "Check if PR exists"
          PR_NUMBER=$(gh api --method GET -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" /repos/${{ github.repository }}/pulls -f "head=${{ github.repository_owner }}:$BRANCH_NAME" -f "base=main" -q [].number)
          if [[ -z $PR_NUMBER ]]
          then
            echo "Creating pull request"
            gh api --method POST -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" /repos/${{ github.repository }}/pulls -f "title=Update generated content" -f "head=$BRANCH_NAME" -f "base=main" -f "body=Automated PR to update generated content"
          else
            echo "Update pull request"
            gh api --method PATCH -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" /repos/${{ github.repository }}/pulls/$PR_NUMER -f "title=Update generated content" -f "base=main" -f "body=Automated PR to update generated content"
          fi
        shell: bash
